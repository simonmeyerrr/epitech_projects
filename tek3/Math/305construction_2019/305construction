#!/usr/bin/env python3

import sys
import curses


class Task:
    def __init__(self, task):
        self.id = ""
        self.desc = ""
        self.duration = ""
        self.prereq = []
        elems = task.split(';')
        if len(elems) < 3:
            print("Error in file content")
            exit(84)
        self.id = elems[0]
        self.desc = elems[1]
        if get_int(elems[2]) <= 0:
            print("getint fail")
            exit(84)
        self.duration = elems[2]
        if len(elems) >= 4:
            for i in range(3, len(elems)):
                if elems[i] == self.id:
                    print("Dependency can't be task ID")
                    exit(84)
                self.prereq.append(elems[i])


def check_dep_doubles(tasks):
    dep_ids = []

    for i in range(0, len(tasks)):
        for task_id in dep_ids:
            if task_id == tasks[i].id:
                print("You can't have the same task ID twice")
                exit(84)
        dep_ids.append(tasks[i].id)
    return dep_ids


def check_dep_exist(tasks):
    dep_ids = check_dep_doubles(tasks)

    for i in range(0, len(tasks)):
        for dep in tasks[i].prereq:
            exists = False
            for existing_dep in dep_ids:
                if existing_dep == dep:
                    exists = True
            if not exists:
                print("Dependencies must be task ID")
                exit(84)


def check_starting_task(tasks):
    no_dep = 0

    for i in range(0, len(tasks)):
        if len(tasks[i].prereq) == 0:
            no_dep += 1
    if no_dep == 0:
        print("There must be at least 1 task without dependency")
        exit(84)
    return 0


def read_file(file: str):
    try:
        with open(file, 'r') as content_file:
            content = content_file.read()
        return content.split('\n')
    except FileNotFoundError:
        print("File not found")
        exit(84)


def is_in_tab(tab, to_find):
    for element in tab:
        if element == to_find:
            return True
    return False


def get_pos(tab, to_find):
    for i in range(0, len(tab)):
        if tab[i] == to_find:
            return i
    raise ValueError


def create_matrix(size: int):
    matrix = []
    for i in range(0, size):
        line = []
        for j in range(0, size):
            line.append(0)
        matrix.append(line)
    return matrix


def display_matrix(matrix):
    for i in range(0, len(matrix)):
        for j in range(0, len(matrix[i])):
            if j != 0:
                print(" ", end='')
            print(matrix[i][j], end='')
        print("\n", end='')


def copy_matrix(matrix):
    new_matrix = []
    for i in range(0, len(matrix)):
        line = []
        for j in range(0, len(matrix[i])):
            line.append(matrix[i][j])
        new_matrix.append(line)
    return new_matrix


def multiply_matrix(matrix1, matrix2):
    new_matrix = create_matrix(len(matrix1))
    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            for k in range(len(matrix2)):
                new_matrix[i][j] += matrix1[i][k] * matrix2[k][j]
    return new_matrix


def get_int(value):
    try:
        int(value)
        return int(value)
    except ValueError:
        print("Invalid int cast:", value, file=sys.stderr)
        exit(84)


def get_float(value):
    try:
        float(value)
        return float(value)
    except ValueError:
        print("Invalid float cast:", value, file=sys.stderr)
        exit(84)


def get_tasks():
    content = read_file(sys.argv[1])
    tasks = []
    for task in content:
        tasks.append(Task(task))
    check_starting_task(tasks)
    check_dep_exist(tasks)


def project():
    if len(sys.argv) != 2:
        print("Error in args number")
        exit(84)
    get_tasks()


def main():
    try:
        project()
        exit(0)
    except Exception:
        print("Exception")
        exit(84)


if __name__ == '__main__':
    main()
