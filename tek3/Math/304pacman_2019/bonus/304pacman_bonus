#!/usr/bin/env python3

import sys
import curses
from time import sleep


def read_file(file: str):
    try:
        with open(file, 'r') as content_file:
            content = content_file.read()
        lines = content.split('\n')
        while len(lines) >= 1 and lines[len(lines) - 1] == "":
            lines.pop(len(lines) - 1)
        return lines
    except FileNotFoundError:
        print("File not found", file=sys.stderr)
        exit(84)


def init_ncurses():
    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    stdscr.keypad(True)
    curses.start_color()
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_WHITE)
    curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_YELLOW)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_RED)
    curses.init_pair(4, curses.COLOR_BLUE, curses.COLOR_BLACK)
    return stdscr


def close_ncurses(stdscr):
    curses.nocbreak()
    stdscr.keypad(False)
    curses.echo()
    curses.endwin()


class Block:
    def __init__(self, char):
        self.wall = False
        self.pacman = False
        self.fantom = False
        self.used = False
        self.distance = 0
        if char == "0":
            self.wall = False
        elif char == "1":
            self.wall = True
        elif char == "F":
            self.fantom = True
        elif char == "P":
            self.pacman = True
        else:
            print("Invalid block in map", file=sys.stderr)
            exit(84)

    def display(self, wall, void):
        if self.wall:
            print(wall, end='')
        elif self.pacman:
            print("P", end='')
        elif self.fantom:
            print("F", end='')
        elif self.used:
            print(self.distance % 10, end='')
        else:
            print(void, end='')

    def display_ncurses(self, stdscr, i, j):
        if self.wall:
            stdscr.addstr(i, j * 2, "  ", curses.color_pair(1))
        elif self.pacman:
            stdscr.addstr(i, j * 2, "--", curses.color_pair(2))
        elif self.fantom:
            stdscr.addstr(i, j * 2, "--", curses.color_pair(3))
        elif self.used:
            stdscr.addstr(i, j * 2, "%d " % (self.distance % 10), curses.color_pair(4))
        else:
            stdscr.addstr(i, j * 2, "  ")


class Map:
    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.blocks = []

    def display(self, wall, void):
        for i in range(0, self.height):
            for j in range(0, self.width):
                self.blocks[j + i * self.width].display(wall, void)
            print("")

    def display_ncurses(self, stdscr):
        stdscr.clear()
        for i in range(0, self.height):
            for j in range(0, self.width):
                self.blocks[j + i * self.width].display_ncurses(stdscr, i, j)
        stdscr.refresh()
        sleep(0.05)


def check_map_size(content):
    height = len(content)
    if height == 0:
        print("Invalid height map", file=sys.stderr)
        exit(84)
    width = len(content[0])
    if width == 0:
        print("Invalid width map", file=sys.stderr)
        exit(84)
    for line in content:
        if len(line) != width:
            print("Invalid map, not same width", file=sys.stderr)
            exit(84)
    return [height, width]


def parse_map_from_file(file):
    content = read_file(file)
    size = check_map_size(content)
    my_map = Map(size[0], size[1])
    pacman = 0
    fantom = 0
    for line in content:
        for char in line:
            block = Block(char)
            if block.pacman:
                pacman += 1
            if block.fantom:
                fantom += 1
            my_map.blocks.append(block)
    if pacman != 1 or fantom != 1:
        print("Invalid number of Pacman or Ghost", file = sys.stderr)
        exit(84)
    return my_map


def check_around(my_map, pos, direction, depth):
    actual_x = int(pos / my_map.width)
    actual_y = pos % my_map.width
    if direction == 0:
        actual_x -= 1
    elif direction == 1:
        actual_y += 1
    elif direction == 2:
        actual_x += 1
    else:
        actual_y -= 1
    if actual_x < 0 or actual_x >= my_map.height or actual_y < 0 or actual_y >= my_map.width:
        return -1
    new_pos = actual_y + actual_x * my_map.width
    if my_map.blocks[new_pos].pacman:
        return -2
    elif my_map.blocks[new_pos].fantom or my_map.blocks[new_pos].wall or my_map.blocks[new_pos].used:
        return -1
    else:
        my_map.blocks[new_pos].used = True
        my_map.blocks[new_pos].distance = depth
        return new_pos


def get_fantom_pos(my_map):
    pos = 0
    for block in my_map.blocks:
        if block.fantom:
            return pos
        pos += 1
    return 0


def algo_map(my_map, stdscr):
    prev = [get_fantom_pos(my_map)]
    next_place = []
    end = False
    depth = 1
    while end is False:
        for elem in prev:
            for i in range(0, 4):
                ret = check_around(my_map, elem, i, depth)
                if ret >= 0:
                    next_place.append(ret)
                elif ret == -2:
                    return my_map
                my_map.display_ncurses(stdscr)
        depth += 1
        prev = next_place.copy()
        next_place = []
        if len(prev) == 0:
            end = True
    return my_map


def project():
    if len(sys.argv) != 4:
        print("Invalid number of argument", file=sys.stderr)
        exit(84)
    if len(sys.argv[2]) != 1 or len(sys.argv[3]) != 1:
        print("Invalid size for display", file=sys.stderr)
        exit(84)
    my_map = parse_map_from_file(sys.argv[1])
    stdscr = init_ncurses()
    my_map = algo_map(my_map, stdscr)
    close_ncurses(stdscr)
    my_map.display(sys.argv[2], sys.argv[3])


def main():
    try:
        project()
        exit(0)
    except Exception:
        print("Execption caught", file=sys.stderr)
        exit(84)


if __name__ == '__main__':
    main()
